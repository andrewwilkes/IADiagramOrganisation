/*
@Changelog
37f95e8 07/12/2017 Initialisation projet
900d9f9 12/12/2017 Calcule de l'aire
f22dc3c 12/12/2017 Calcule de l'aire la plus grande parmi plusieurs
graphes
27ef782 12/12/2017 Meilleure permutation possible pour un graphe
N/D 15/12/2017 Restructuration du projet (jeu de données écrit en dur)
49c0b9c 23/12/2017 Refactorisation du code faite et renvoi de la
meilleure permutation possible
d3fb99f 24/12/2017 Factorisation code inutile
9866c62 27/12/2017 Méthode calcule aire entre chaque dimensions
(ordonnancement)
a7f8318 28/12/2017 Méthode pour calculer la différence entre les
graphes (ordonnancement)
d0067cc 28/12/2017 Ajout de dimensions pour les tests
c6ca7e8 30/12/2017 Ajout des dernières méthodes pour l'ordonnancement
*/

:-include('data.pl').

% Calcule l'aire entre 2 caractéristiques
aire(Diag, [Dim1, Dim2], Tmp, RET):-
    value(Diag, Dim1, X1),
    value(Diag, Dim2, X2),
    max(Dim1, Y1),
    max(Dim2, Y2),
    RET is ((1/2*(X1/Y1)*(X2/Y2))) + Tmp.

aire(Diag, [Dim1, Dim2|ListDim], Tmp, RET):-
    value(Diag, Dim1, X1),
    value(Diag, Dim2, X2),
    max(Dim1, Y1),
    max(Dim2, Y2),
    RET1 is ((1/2*(X1/Y1)*(X2/Y2))) + Tmp,
    aire(Diag, [Dim2|ListDim], RET1, RET).

aireInit(Diag,[Dim1|ListDim], RET):-
    insertFin(Dim1, [Dim1|ListDim], N1),
    aire(Diag,N1,0,RET).

% Ajoute la première valeur à la fin de la liste initiale (pour l'aire)
insertFin(Val, [], [Val]).

insertFin(Val, [X|L1], [X|L2]):-
    insertFin(Val, L1, L2).

% Calcule la somme des aires de tous les graphes pour une permutation
sommeAireInit(ListDiag, ListDim, RET):-
    write(ListDiag),
    sommeAire(ListDiag, ListDim, 0, RET).

sommeAire([Diag], ListDim, TmpAire, RET):-
    write('lol'),
    aireInit(Diag, ListDim, AIRE),
    write('LOL'),
    RET is TmpAire + AIRE.

sommeAire([Diag|ListDiag], ListDim, TmpAire, RET):-
    write('LoL'),
    aireInit(Diag, ListDim, AIRE),
    RET1 is TmpAire + AIRE,
    sommeAire(ListDiag, ListDim, RET1, RET).

maxAirePermu(ListDiag, [ListPermu1], TmpPermu, TmpAire, RET):-
    write('moui'),
    sommeAireInit(ListDiag, ListPermu1, Aire),
    write('ending'),
    (   TmpAire < Aire ->
        RET = ListPermu1
    ;   RET = TmpPermu
    ).

maxAirePermu(ListDiag, [ListPermu1|ListPermuAutres], TmpPermu, TmpAire, RET):-
    write('WOOT'),
    sommeAireInit(ListDiag, ListPermu1, Aire),
    write('DAMN'),
    (   TmpAire < Aire ->
        maxAirePermu(ListDiag, ListPermuAutres, ListPermu1, Aire, RET)
    ;   maxAirePermu(ListDiag, ListPermuAutres, TmpPermu, TmpAire, RET)
    ).

permNonCyclique([First|Liste], [First|Permu]):-
    permutation(Liste,Permu).

supprimerPermuSymetriqueInit(List, Ret):-
    supprimerPermuSymetrique(List, [], Ret).

supprimerPermuSymetrique([[First,Second|List]|ListTotal], Tmp, Ret):-
    reverse(List, [RevFirst|_]),
    index(Second, I1),
    index(RevFirst, I2),
    (   I1 < I2 ->
        insertFin([First,Second|List], Tmp, NewTmp),
        supprimerPermuSymetrique(ListTotal, NewTmp, Ret)
    ;   supprimerPermuSymetrique(ListTotal, Tmp, Ret)
    ).

supprimerPermuSymetrique([[First,Second|List]], Tmp, Ret):-
    reverse(List, [RevFirst|_]),
    index(Second, I1),
    index(RevFirst, I2),
    (   I1 < I2 ->
        insertFin([First,Second|List], Tmp, NewTmp),
        Ret = NewTmp
    ;   Ret = Tmp
    ).




